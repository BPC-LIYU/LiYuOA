# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: liyuim.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='liyuim.proto',
  package='im',
  syntax='proto3',
  serialized_pb=_b('\n\x0cliyuim.proto\x12\x02im\"\x1c\n\tIMRequest\x12\x0f\n\x07\x63ommend\x18\x01 \x01(\t\"\x1a\n\x08IMResult\x12\x0e\n\x06result\x18\x01 \x01(\t29\n\x0bMqttCommend\x12*\n\tCommendIm\x12\r.im.IMRequest\x1a\x0c.im.IMResult\"\x00\x42&\n\x0e\x63om.liyu.oa.imB\rLiYuOAIMProtoP\x01\xa2\x02\x02LYb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_IMREQUEST = _descriptor.Descriptor(
  name='IMRequest',
  full_name='im.IMRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='commend', full_name='im.IMRequest.commend', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=48,
)


_IMRESULT = _descriptor.Descriptor(
  name='IMResult',
  full_name='im.IMResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='result', full_name='im.IMResult.result', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=76,
)

DESCRIPTOR.message_types_by_name['IMRequest'] = _IMREQUEST
DESCRIPTOR.message_types_by_name['IMResult'] = _IMRESULT

IMRequest = _reflection.GeneratedProtocolMessageType('IMRequest', (_message.Message,), dict(
  DESCRIPTOR = _IMREQUEST,
  __module__ = 'liyuim_pb2'
  # @@protoc_insertion_point(class_scope:im.IMRequest)
  ))
_sym_db.RegisterMessage(IMRequest)

IMResult = _reflection.GeneratedProtocolMessageType('IMResult', (_message.Message,), dict(
  DESCRIPTOR = _IMRESULT,
  __module__ = 'liyuim_pb2'
  # @@protoc_insertion_point(class_scope:im.IMResult)
  ))
_sym_db.RegisterMessage(IMResult)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\016com.liyu.oa.imB\rLiYuOAIMProtoP\001\242\002\002LY'))
import abc
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaMqttCommendServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def CommendIm(self, request, context):
    raise NotImplementedError()

class BetaMqttCommendStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def CommendIm(self, request, timeout):
    raise NotImplementedError()
  CommendIm.future = None

def beta_create_MqttCommend_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import liyuim_pb2
  import liyuim_pb2
  request_deserializers = {
    ('im.MqttCommend', 'CommendIm'): liyuim_pb2.IMRequest.FromString,
  }
  response_serializers = {
    ('im.MqttCommend', 'CommendIm'): liyuim_pb2.IMResult.SerializeToString,
  }
  method_implementations = {
    ('im.MqttCommend', 'CommendIm'): face_utilities.unary_unary_inline(servicer.CommendIm),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_MqttCommend_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import liyuim_pb2
  import liyuim_pb2
  request_serializers = {
    ('im.MqttCommend', 'CommendIm'): liyuim_pb2.IMRequest.SerializeToString,
  }
  response_deserializers = {
    ('im.MqttCommend', 'CommendIm'): liyuim_pb2.IMResult.FromString,
  }
  cardinalities = {
    'CommendIm': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'im.MqttCommend', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
